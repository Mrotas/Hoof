@using Common
@using Domain.AnnualPlan.Models
@model Domain.AnnualPlan.ViewModels.AnnualPlanViewModel

@{
    ViewBag.Title = "Index";
}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <link rel="stylesheet" href="~/Content/AnnualPlan/AnnualPlanStyles.css" />

    <script type="text/javascript">

        $('#bodyContainer').css('width', '75%');

        $(document).ready(function () {
            $('#bigGameTable tr').each(function () {
                $.each(this.cells, function (i, item) {
                    var text = item.innerText;
                    if (text === "0") {
                        item.innerText = "";
                    }
                });
            });
        });

        $(document).ready(function () {
            $('#smallGameTable tr').each(function () {
                $.each(this.cells, function (i, item) {
                    var text = item.innerText;
                    if (text === "0") {
                        item.innerText = "";
                    }
                });
            });
        });

    </script>
}

<h2 style="text-align: center; font-weight: bold">ROCZNY PLAN ŁOWIECKI</h2>
<h3 style="text-align: center; font-weight: bold">@($"na rok gospodarczy {DateTime.Now.Year} / {DateTime.Now.Year + 1}")</h3>
<h3 style="text-align: center; font-weight: bold">@($"oraz sprawozdanie z wykonania planu roku gospodarczego {DateTime.Now.Year - 1} / {DateTime.Now.Year}")</h3>

<br />

<h3 style="font-weight: bold">I. Dane ogólne</h3>
<h4>1. Obwód łowiecki nr ........ powierzchnia ......... ha, w tym powierzchnia gruntów leśnych .......... ha powierzchnia po wyłączeniach, o których mowa w art. 26 ustawy z 13.X.2995r. Prawo Łowieckie ......... ha</h4>
<h4>2. Wojewódzctwo .........................................................................., Powiat................................................................................................................</h4>
<h4>3. Nadleśnictwo (nazwa i adres siedziby) .........................................................................................................................................................................</h4>
<h4>4. Regionalna Dyrekcja Lasów Państwowych (nazwa i adres siedziby) ................................................................................................................................................</h4>
<h4>5. Zarząd Okręgowy PZŁ (nazwa i adres siedziby) ..................................................................................................................................................................</h4>
<h4>6. Dzierżawca/lub zarządca (nazwa i adres siedziby) ..............................................................................................................................................................</h4>

<br />

<h3 style="font-weight: bold">II. Zagospodarowanie obwodu łowieckiego, szkody łowieckie</h3>
<table class="table-bordered annualPlanTable" id="annualPlanTable">
    <tr>
        <th>@AnnualPlan.Specification</th>
        <th class="unit">@AnnualPlan.Unit</th>
        <th class="long-header">@String.Format(AnnualPlan.PreviousEconomyPlan, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th class="long-header">@String.Format(AnnualPlan.PreviousPlanExecution, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th class="long-header">@String.Format(AnnualPlan.March10Condition, DateTime.Now.Year)</th>
        <th class="long-header">@String.Format(AnnualPlan.CurrentYearPlan, DateTime.Now.Year, DateTime.Now.Year + 1)</th>
    </tr>
    <tr>
        <td class="column_number" style="text-align: center">1</td>
        <td class="column_number">2</td>
        <td class="column_number">3</td>
        <td class="column_number">4</td>
        <td class="column_number">5</td>
        <td class="column_number">6</td>
    </tr>
    <tr>
        <td class="paragraph">1. @AnnualPlan.ContractEmployees</td>
        <td>@AnnualPlan.UnitPersonPartTime</td>
        <td>@Model.LastYearAnnualPlanModel.EmployeePlanModels.FirstOrDefault(x => x.Type == (int)EmploymentType.FullTime).Count</td>
        <td>-</td>
        <td>-</td>
        <td>@Model.CurrentAnnualPlanModel.EmployeePlanModels.FirstOrDefault(x => x.Type == (int)EmploymentType.FullTime).Count</td>
    </tr>
    <tr>
        <td class="paragraph">2. @AnnualPlan.NonContractEmployees</td>
        <td>@AnnualPlan.UnitPerson</td>
        <td>@Model.LastYearAnnualPlanModel.EmployeePlanModels.FirstOrDefault(x => x.Type == (int)EmploymentType.PartTime).Count</td>
        <td>-</td>
        <td>-</td>
        <td>@Model.CurrentAnnualPlanModel.EmployeePlanModels.FirstOrDefault(x => x.Type == (int)EmploymentType.PartTime).Count</td>
    </tr>
    <tr>
        <td class="paragraph">3. @AnnualPlan.HuntingEquipment</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
    </tr>
    <tr>
        <td>a) @AnnualPlan.Pastures</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Pastures).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Pastures).Count</td>
    </tr>
    <tr>
        <td>b) @AnnualPlan.DeerLickers</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.DeerLickers).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.DeerLickers).Count</td>
    </tr>
    <tr>
        <td>c) @AnnualPlan.Pulpits</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Pulpits).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Pulpits).Count</td>
    </tr>
    <tr>
        <td>d) @AnnualPlan.Aviaries</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Aviaries).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Aviaries).Count</td>
    </tr>
    <tr>
        <td>e) @AnnualPlan.Farms</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Farms).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.Farms).Count</td>
    </tr>
    <tr>
        <td>f) @AnnualPlan.WateringPlaces</td>
        <td>@AnnualPlan.UnitPiece</td>
        <td>@Model.LastYearAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.WateringPlaces).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.HuntEquipmentPlanModels.FirstOrDefault(x => x.Type == (int)HuntEquipment.WateringPlaces).Count</td>
    </tr>
    <tr>
        <td class="paragraph">4. @AnnualPlan.TrunkFood</td>
        <td>@AnnualPlan.UnitHectare</td>
        <td>@Model.LastYearAnnualPlanModel.TrunkFoodPlanModel.Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.TrunkFoodPlanModel.Count</td>
    </tr>
    <tr>
        <td class="paragraph">5. @AnnualPlan.Barriers</td>
        <td>@AnnualPlan.UnitKilometers</td>
        <td>@Model.LastYearAnnualPlanModel.BarrierPlanModel.Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.BarrierPlanModel.Count</td>
    </tr>
    <tr>
        <td class="paragraph">6. @AnnualPlan.Fields</td>
        <td>@AnnualPlan.UnitHectare</td>
        <td>@Model.LastYearAnnualPlanModel.FieldPlanModel.Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.FieldPlanModel.Count</td>
    </tr>
    <tr>
        <td class="paragraph">7. @AnnualPlan.FoodAndSalt</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
        <td>@AnnualPlan.X</td>
    </tr>
    <tr>
        <td>a) @AnnualPlan.Dry</td>
        <td>@AnnualPlan.UnitTon</td>
        <td>@Model.LastYearAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Dry).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Dry).Count</td>
    </tr>
    <tr>
        <td>b) @AnnualPlan.Juicy</td>
        <td>@AnnualPlan.UnitTon</td>
        <td>@Model.LastYearAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Juicy).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Juicy).Count</td>
    </tr>
    <tr>
        <td>c) @AnnualPlan.Pithy</td>
        <td>@AnnualPlan.UnitTon</td>
        <td>@Model.LastYearAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Pithy).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Pithy).Count</td>
    </tr>
    <tr>
        <td>d) @AnnualPlan.Salt</td>
        <td>@AnnualPlan.UnitTon</td>
        <td>@Model.LastYearAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Salt).Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.FodderPlanModels.FirstOrDefault(x => x.Type == (int)Fodder.Salt).Count</td>
    </tr>
    <tr>
        <td class="paragraph">8. @AnnualPlan.DamagedArea</td>
        <td>@AnnualPlan.UnitHectare</td>
        <td>@Model.LastYearAnnualPlanModel.DamagedFieldPlanModel.Count</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.DamagedFieldPlanModel.Count</td>
    </tr>
    <tr>
        <td colspan="6"> III. Informacja o przychodach ze sprzedaży tusz zwierzyny płowej i kosztach zagospodarowania obwodu.</td>
    </tr>
    <tr>
        <td class="paragraph">1. @AnnualPlan.Costs</td>
        <td>@AnnualPlan.UnitThousandZlotych</td>
        <td>@Model.LastYearAnnualPlanModel.CostPlanModels.FirstOrDefault(x => x.Type == (int)CostType.Cost).Cost</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.CostPlanModels.FirstOrDefault(x => x.Type == (int)CostType.Cost).Cost</td>
    </tr>
    <tr>
        <td>@AnnualPlan.Compensation</td>
        <td>@AnnualPlan.UnitThousandZlotych</td>
        <td></td>
        <td></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td class="paragraph">2. @AnnualPlan.CarcassesRevenues</td>
        <td>@AnnualPlan.UnitThousandZlotych</td>
        <td>@Model.LastYearAnnualPlanModel.CostPlanModels.FirstOrDefault(x => x.Type == (int)CostType.Revenue).Cost</td>
        <td></td>
        <td></td>
        <td>@Model.CurrentAnnualPlanModel.CostPlanModels.FirstOrDefault(x => x.Type == (int)CostType.Revenue).Cost</td>
    </tr>
</table>

<br />
<br />

<h3 style="font-weight: bold">IV. Dane dotyczące zwierząt łownych.</h3>
<h3 style="font-weight: bold">a) zwierzyna gruba</h3>
<table class="table-bordered annualPlanTable" style="text-align: center" id="bigGameTable">
    <tr>
        <th class="short-header" rowspan="4">@AnnualPlan.GameTypes</th>
        <th colspan="2">@String.Format(AnnualPlan.PreviousYearGainPlan, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th colspan="4">@String.Format(AnnualPlan.PreviousYearExecution, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th>@AnnualPlan.SanitaryLoss</th>
        <th>@AnnualPlan.GamesColonized10March</th>
        <th>@String.Format(AnnualPlan.EstimatedNumberGamesColonized10March, DateTime.Now.Year - 1)</th>
        <th>@String.Format(AnnualPlan.GamesColonizedPlan, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th>@AnnualPlan.BigGamePlanBeforeHuntSeason</th>
        <th colspan="2">@String.Format(AnnualPlan.GamesGainPlan, DateTime.Now.Year, DateTime.Now.Year + 1)</th>
        <th colspan="4">@String.Format(AnnualPlan.MinMaxGameGainPlan, DateTime.Now.Year, DateTime.Now.Year + 1)</th>
    </tr>
    <tr>
        <td class="game-unit" style="text-align: center" rowspan="3">odstrzał szt.</td>
        <td class="game-unit" rowspan="3">odłów szt.</td>
        <td class="game-unit" rowspan="3">ogółem szt.</td>
        <td class="game-unit" colspan="3">w tym szt.</td>
        <td></td>
        <td class="game-unit" rowspan="3">szt.</td>
        <td class="game-unit" rowspan="3">szt.</td>
        <td class="game-unit" rowspan="3">szt.</td>
        <td class="game-unit" rowspan="3">szt.</td>
        <td class="game-unit" rowspan="3">odstrzał szt.</td>
        <td class="game-unit" rowspan="3">odłów szt.</td>
        <td class="game-unit" colspan="2">odstrzał szt.</td>
        <td class="game-unit" colspan="2">odłów szt.</td>
    </tr>
    <tr>
        <td class="game-unit" rowspan="2">odstrzał</td>
        <td class="game-unit" rowspan="2">odłów</td>
        <td class="game-unit" colspan="2">ubytki</td>
        <td class="game-unit" rowspan="2">min</td>
        <td class="game-unit" rowspan="2">max</td>
        <td class="game-unit" rowspan="2">min</td>
        <td class="game-unit" rowspan="2">max</td>
    </tr>
    <tr>
        <td class="game-unit">ogółem</td>
        <td class="game-unit">W tym odstrzał sanitarny</td>
    </tr>
    <tr>
        <td class="column_number" style="text-align: center">1</td>
        <td class="column_number">2</td>
        <td class="column_number">3</td>
        <td class="column_number">4</td>
        <td class="column_number">5</td>
        <td class="column_number">6</td>
        <td class="column_number">7</td>
        <td class="column_number">8</td>
        <td class="column_number">9</td>
        <td class="column_number">10</td>
        <td class="column_number">11</td>
        <td class="column_number">12</td>
        <td class="column_number">13</td>
        <td class="column_number">14</td>
        <td class="column_number">15</td>
        <td class="column_number">16</td>
        <td class="column_number">17</td>
        <td class="column_number">18</td>
    </tr>
    @{ int kindCount = 1;}
    @foreach (var gameKindPlanModels in Model.GamePlanModel.Where(x => x.GameModel.Type == 1).GroupBy(x => x.GameModel.Kind))
    {
        <tr>
            <td style="font-weight: bold">@($"{kindCount}. {gameKindPlanModels.Select(x => x.GameModel.KindName).FirstOrDefault()} razem")</td>
            <td>@gameKindPlanModels.Sum(x => x.PreviousGameHuntPlan.Cull)</td>
            <td>@gameKindPlanModels.Sum(x => x.PreviousGameHuntPlan.Catch)</td>
            <td>@(gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Cull) + gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Catch))</td>
            <td>@gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Cull)</td>
            <td>@gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Catch)</td>
            <td>@(gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Loss) + gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss))</td>
            <td>@gameKindPlanModels.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss)</td>
            <td>@gameKindPlanModels.Sum(x => x.GameSettlementPlan.SettlementedGameCountFor10March)</td>
            <td>@gameKindPlanModels.Sum(x => x.EstimatedGameCount.EstimatedGameCountFor10March)</td>
            <td>@gameKindPlanModels.Sum(x => x.GameSettlementPlan.GameSettlementPlanCount)</td>
            <td>@gameKindPlanModels.Sum(x => x.EstimatedGameCount.EstimatedGameCountBeforeHuntingSeason)</td>
            <td>@gameKindPlanModels.Sum(x => x.CurrentGameHuntPlan.Cull)</td>
            <td>@gameKindPlanModels.Sum(x => x.CurrentGameHuntPlan.Catch)</td>
            <td>@(gameKindPlanModels.Key.Equals(7) ? "" : "X")</td>
            <td>X</td>
            <td>@(gameKindPlanModels.Key.Equals(7) ? "" : "X")</td>
            <td>X</td>
        </tr>
        foreach (var gameSubKindPlanModels in gameKindPlanModels.GroupBy(x => x.GameModel.SubKind))
        {
            if (gameSubKindPlanModels.Key != null)
            {
                <tr>
                    <td>@($"- {gameSubKindPlanModels.Select(x => x.GameModel.SubKindName).FirstOrDefault()}")</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.PreviousGameHuntPlan.Cull)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.PreviousGameHuntPlan.Catch)</td>
                    <td>@(gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Cull) + gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Catch))</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Cull)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Catch)</td>
                    <td>@(gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Loss) + gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss))</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.GameSettlementPlan.SettlementedGameCountFor10March)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.EstimatedGameCount.EstimatedGameCountFor10March)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.GameSettlementPlan.GameSettlementPlanCount)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.EstimatedGameCount.EstimatedGameCountBeforeHuntingSeason)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.CurrentGameHuntPlan.Cull)</td>
                    <td>@gameSubKindPlanModels.Sum(x => x.CurrentGameHuntPlan.Catch)</td>
                    <td>X</td>
                    <td>X</td>
                    <td>X</td>
                    <td>X</td>
                </tr>
            }
            foreach (var gameClassPlanModel in gameSubKindPlanModels.GroupBy(x => x.Class))
            {
                if (gameClassPlanModel.Key != null)
                {
                    <tr>
                        <td style="text-align: center">@($"- {gameClassPlanModel.Select(x => x.ClassName).FirstOrDefault()}")</td>
                        <td>@gameClassPlanModel.Sum(x => x.PreviousGameHuntPlan.Cull)</td>
                        <td>@gameClassPlanModel.Sum(x => x.PreviousGameHuntPlan.Catch)</td>
                        <td>@(gameClassPlanModel.Sum(x => x.PreviousGamePlanExecution.Cull) + gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.Catch))</td>
                        <td>@gameClassPlanModel.Sum(x => x.PreviousGamePlanExecution.Cull)</td>
                        <td>@gameClassPlanModel.Sum(x => x.PreviousGamePlanExecution.Catch)</td>
                        <td>@(gameClassPlanModel.Sum(x => x.PreviousGamePlanExecution.Loss) + gameSubKindPlanModels.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss))</td>
                        <td>@gameClassPlanModel.Sum(x => x.PreviousGamePlanExecution.SanitaryLoss)</td>
                        <td>@gameClassPlanModel.Sum(x => x.GameSettlementPlan.SettlementedGameCountFor10March)</td>
                        <td>@gameClassPlanModel.Sum(x => x.EstimatedGameCount.EstimatedGameCountFor10March)</td>
                        <td>@gameClassPlanModel.Sum(x => x.GameSettlementPlan.GameSettlementPlanCount)</td>
                        <td>@gameClassPlanModel.Sum(x => x.EstimatedGameCount.EstimatedGameCountBeforeHuntingSeason)</td>
                        <td>@gameClassPlanModel.Sum(x => x.CurrentGameHuntPlan.Cull)</td>
                        <td>@gameClassPlanModel.Sum(x => x.CurrentGameHuntPlan.Catch)</td>
                        <td>X</td>
                        <td>X</td>
                        <td>X</td>
                        <td>X</td>
                    </tr>
                }
            }
        }
        kindCount++;
    }
</table>

<br />
<br />

<h3 style="font-weight: bold">b) zwierzyna drobna.</h3>
<table class="table-bordered annualPlanTable" style="text-align: center" id="smallGameTable">
    <tr>
        <th class="medium-header" rowspan="3">@AnnualPlan.GameTypes</th>
        <th colspan="2">@String.Format(AnnualPlan.PreviousYearGainPlan, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th colspan="2">@String.Format(AnnualPlan.PreviousYearExecution, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th>@AnnualPlan.GamesColonized10March</th>
        <th>@String.Format(AnnualPlan.EstimatedNumberGamesColonized10March, DateTime.Now.Year - 1)</th>
        <th>@String.Format(AnnualPlan.GamesColonizedPlan, DateTime.Now.Year - 1, DateTime.Now.Year)</th>
        <th colspan="2">@String.Format(AnnualPlan.GamesGainPlan, DateTime.Now.Year, DateTime.Now.Year + 1)</th>
        <th colspan="4">@String.Format(AnnualPlan.MinMaxGameGainPlan, DateTime.Now.Year, DateTime.Now.Year + 1)</th>
    </tr>
    <tr>
        <td style="text-align: center" rowspan="2">odstrzał szt.</td>
        <td rowspan="2">odłów szt.</td>
        <td rowspan="2">odstrzał szt.</td>
        <td rowspan="2">odłów szt.</td>
        <td rowspan="2">szt.</td>
        <td rowspan="2">szt.</td>
        <td rowspan="2">szt.</td>
        <td rowspan="2">odstrzał szt.</td>
        <td rowspan="2">odłów szt.</td>
        <td colspan="2">odstrzał szt.</td>
        <td colspan="2">odłów szt.</td>
    </tr>
    <tr>
        <td>min</td>
        <td>max</td>
        <td>min</td>
        <td>max</td>
    </tr>
    <tr>
        <td class="column_number" style="text-align: center">1</td>
        <td class="column_number">2</td>
        <td class="column_number">3</td>
        <td class="column_number">4</td>
        <td class="column_number">5</td>
        <td class="column_number">6</td>
        <td class="column_number">7</td>
        <td class="column_number">8</td>
        <td class="column_number">9</td>
        <td class="column_number">10</td>
        <td class="column_number">11</td>
        <td class="column_number">12</td>
        <td class="column_number">13</td>
        <td class="column_number">14</td>
    </tr>

    @foreach (var gameKindPlanModel in Model.GamePlanModel.Where(x => x.GameModel.Type == 2).GroupBy(x => x.GameModel.Kind))
    {
        <tr>
            <td style="font-weight: bold">@($"{kindCount}. {gameKindPlanModel.Select(x => x.GameModel.KindName).FirstOrDefault()}")</td>
            <td>@gameKindPlanModel.Sum(x => x.PreviousGameHuntPlan.Cull)</td>
            <td>@gameKindPlanModel.Sum(x => x.PreviousGameHuntPlan.Catch)</td>
            <td>@gameKindPlanModel.Sum(x => x.PreviousGamePlanExecution.Cull)</td>
            <td>@gameKindPlanModel.Sum(x => x.PreviousGamePlanExecution.Catch)</td>
            <td>@gameKindPlanModel.Sum(x => x.GameSettlementPlan.SettlementedGameCountFor10March)</td>
            <td>@gameKindPlanModel.Sum(x => x.EstimatedGameCount.EstimatedGameCountFor10March)</td>
            <td>@gameKindPlanModel.Sum(x => x.GameSettlementPlan.GameSettlementPlanCount)</td>
            <td>@gameKindPlanModel.Sum(x => x.CurrentGameHuntPlan.Cull)</td>
            <td>@gameKindPlanModel.Sum(x => x.CurrentGameHuntPlan.Catch)</td>
            <td>X</td>
            <td>X</td>
            <td>X</td>
            <td>X</td>
        </tr>

        foreach (var gameSubKindPlanModel in gameKindPlanModel.GroupBy(x => x.GameModel.SubKind))
        {
            if (gameSubKindPlanModel.Key.HasValue)
            {
                <tr>
                    <td style="text-align: center">@($"- {gameSubKindPlanModel.Select(x => x.GameModel.SubKindName).FirstOrDefault()}")</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.PreviousGameHuntPlan.Cull)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.PreviousGameHuntPlan.Catch)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.PreviousGamePlanExecution.Cull)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.PreviousGamePlanExecution.Catch)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.GameSettlementPlan.SettlementedGameCountFor10March)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.EstimatedGameCount.EstimatedGameCountFor10March)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.GameSettlementPlan.GameSettlementPlanCount)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.CurrentGameHuntPlan.Cull)</td>
                    <td>@gameSubKindPlanModel.Sum(x => x.CurrentGameHuntPlan.Catch)</td>
                    <td>X</td>
                    <td>X</td>
                    <td>X</td>
                    <td>X</td>
                </tr>
            }
        }

        kindCount++;
    }
</table>